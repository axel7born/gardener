apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: seed-prometheus
  namespace: {{ .Release.Namespace }}
  labels:
    app: seed-prometheus
    role: monitoring
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: seed-prometheus
      role: monitoring
  serviceName: seed-prometheus
  template:
    metadata:
      labels:
        app: seed-prometheus
        role: monitoring
        networking.gardener.cloud/to-dns: allowed
        networking.gardener.cloud/to-runtime-apiserver: allowed
        networking.resources.gardener.cloud/to-all-seed-scrape-targets: allowed
        networking.resources.gardener.cloud/to-extensions-all-seed-scrape-targets: allowed
        # TODO: For whatever reasons, the seed-prometheus also scrapes vpa-recommenders in all shoot namespaces.
        #  Conceptionally, this is wrong and should be improved (seed-prometheus should only scrape vpa-recommenders in
        #  garden namespace, and prometheis in shoot namespaces should scrape their vpa-recommenders, respectively).
        networking.resources.gardener.cloud/to-all-shoots-vpa-recommender-tcp-8942: allowed
    spec:
      # used to talk to Seed's API server.
      priorityClassName: gardener-system-600
      serviceAccountName: seed-prometheus
      containers:
      - name: prometheus
        image: {{ index .Values.global.images "prometheus" }}
        imagePullPolicy: IfNotPresent
        args:
          - --config.file=/etc/prometheus/config/prometheus.yaml
          - --storage.tsdb.path=/var/prometheus/data
          - --storage.tsdb.no-lockfile
          - --storage.tsdb.retention.size={{ .Values.prometheus.retention.size }}
          - --web.enable-admin-api
          - --web.listen-address=:{{ .Values.prometheus.port }}
          - --web.enable-lifecycle
        # Since v2.0.0-beta.3 prometheus runs as nobody user (fsGroup 65534/runAsUser 0)
        # data volume needs to be mounted with the same permissions,
        # otherwise we will have Permission denied problems
        securityContext:
          runAsUser: 0
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: {{ .Values.prometheus.port }}
            scheme: HTTP
          failureThreshold: 60
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: /-/ready
            port: {{ .Values.prometheus.port }}
            scheme: HTTP
          failureThreshold: 120
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 3
        resources:
          {{- toYaml .Values.prometheus.resources.prometheus | nindent 10 }}
        volumeMounts:
        - mountPath: /etc/prometheus/config
          name: config
          readOnly: true
        - mountPath: /var/prometheus/data
          name: prometheus-db
          subPath: prometheus-
        - mountPath: /etc/prometheus/rules
          name: rules
          readOnly: true
      - name: prometheus-config-reloader
        image: {{ index .Values.global.images "configmap-reloader" }}
        imagePullPolicy: IfNotPresent
        args:
        - --reload-url=http://localhost:{{ .Values.prometheus.port }}/-/reload
        - --watched-dir=/etc/prometheus/config
        - --watched-dir=/etc/prometheus/rules
        resources:
          {{- index .Values.prometheus.resources "prometheus-config-reloader" | toYaml | nindent 10 }}
        volumeMounts:
        - mountPath: /etc/prometheus/config
          name: config
          readOnly: true
        - mountPath: /etc/prometheus/rules
          name: rules
          readOnly: true
      terminationGracePeriodSeconds: 300
      volumes:
      - name: config
        configMap:
          defaultMode: 420
          name: seed-prometheus-config
      - name: rules
        configMap:
          defaultMode: 420
          name: seed-prometheus-rules
  volumeClaimTemplates:
  - metadata:
      name: prometheus-db
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: {{ .Values.prometheus.storage }}
